import { Token } from "./Token.js";
import { Item } from "./Lexer.js";
import * as Expr from "./Expressions.js";
import * as Stmt from "./Statement.js";
export declare class Parser {
    version: string;
    tokens: Item[];
    current: number;
    brackets: number;
    constructor(tokens: any);
    error(token: any, message: any): void;
    parse(): Stmt.Statement[];
    peek(): Item;
    isAtEnd(): boolean;
    isEOL(): boolean;
    reset(position: any): void;
    getPosition(): number;
    advance(): Item;
    previous(): Item;
    nextValid(): void;
    consume(type: any, message: any): Item;
    check(TokenType: Token): boolean;
    match(...TokenType: Token[]): boolean;
    private expressionStatement;
    modifiers(): Stmt.Modifier[];
    private block;
    private statement;
    declaration(): Stmt.Block | Stmt.Expression | Stmt.Function | Stmt.Var | Stmt.Statement | Stmt.Return | Stmt.Class | Stmt.Print;
    classDeclaration(): Stmt.Class;
    comparison(): any;
    equality(): any;
    expression(): Expr.Expression | Expr.Assign | Expr.Set;
    assignment(): Expr.Expression | Expr.Assign | Expr.Set;
    or(): Expr.Expression;
    and(): Expr.Expression;
    term(): any;
    factor(): any;
    power(): any;
    unary(): any;
    finishCall(callee: Expr.Expression): Expr.Expression;
    call(): Expr.Expression;
    primary(): any;
    ifStatement(): Stmt.Statement;
    _function(kind: string): Stmt.Function;
    varDeclaration(): Stmt.Var;
    arrayValue(): any[];
    objectValue(ambiguity?: any): any;
    isObjectId(): {
        name: any;
        type: string | number;
    };
    nameObjectId(): void;
    doStatement(): Stmt.Statement;
    whileStatement(): Stmt.Statement;
    returnStatement(): Stmt.Return;
    forStatement(): Stmt.Statement;
    printStatement(): Stmt.Print;
}
